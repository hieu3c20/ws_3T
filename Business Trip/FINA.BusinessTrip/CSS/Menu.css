.foo {} /* W3C CSS validator likes CSS files to start with a class rather than a comment. Soooooo.... */

/* This style sheet is intended to contain OFTEN CHANGED rules used when the Menu control adapter is enabled. */

/* When the Menu control's Orientation property is Vertical the adapter wraps the menu with DIV */
/* whose class is AspNet-Menu-Vertical. */
/* Note that the example menu in this web site uses relative positioning to force the menu to occupy */
/* a specific place in the web page.  Your web site will likely use a different technique to position your */
/* menu.  So feel free to change all the properties found in this CSS rule if you clone this style sheet. */
/* There is nothing, per se, that is magical about these particular property value choices.  They happen to */
/* work well for the sample page used to demonstrate an adapted menu. */

.PrettyMenu .AspNet-Menu-Vertical
{
    position:relative;
    top: 3em;
    left: 0;
    z-index: 0;
}

/* The menu adapter renders an unordered list (ul) in HTML for each tier in the menu. */
/* So, effectively says: style all tiers in the menu this way... */
.PrettyMenu ul
{
    /*background:#BBEB86;*/
}

/* Top tier */
.PrettyMenu .AspNet-Menu-Vertical ul.AspNet-Menu
{
    
}

/* This rule effectively says: style all tiers EXCEPT THE TOP TIER in the menu this way... */
/* In other words, this rule can be used to style the second and third tiers of the menu without impacting */
/* the topmost tier's appearance. */
.PrettyMenu ul.AspNet-Menu ul
{
    width: 190px;
    left: 8.9em;
    top: -1em;
    z-index: 0;
}

.PrettyMenu ul.AspNet-Menu ul ul
{
    left: 10.4em;
}

/* The menu adapter generates a list item (li) in HTML for each menu item. */
/* Use this rule create the common appearance of each menu item. */
.PrettyMenu ul.AspNet-Menu li
{
   /* background:#BBEB86 url(bg-menu-example.png) repeat-x;*/
}

/* Within each menu item is a link or a span, depending on whether or not the MenuItem has defined it's */
/* NavigateUrl property. By setting a transparent background image here you can effectively layer two images */
/* in each menu item.  One comes from the CSS rule (above) governing the li tag that each menu item has. */
/* The second image comes from this rule (below). */
.PrettyMenu ul.AspNet-Menu li a.AspNet-Menu-Link
{
	float:left;
    color: #ffffff;
    border-right: solid 1px #E7E7E7;
    font-weight:bold;
    line-height:32px;
    padding-left:8px;
    padding-right:8px;
}

.PrettyMenu ul.AspNet-Menu ul li a.AspNet-Menu-Link
{
	width:190px;
}

/* When a menu item contains no submenu items it is marked as a "leaf" and can be styled specially by this rule. */
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Leaf a,
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Leaf span
{
    background-image: none;
}

/* Not used presently.  This is here if you modify the menu adapter so it renders img tags, too. */
.PrettyMenu ul.AspNet-Menu li a img
{
    border-style: none;
    vertical-align: middle;
}

/* When you hover over a menu item, this rule comes into play. */
/* Browsers that do not support the CSS hover pseudo-class, use JavaScript to dynamically change the */
/* menu item's li tag so it has the AspNet-Menu-Hover class when the cursor is over that li tag. */
/* See MenuAdapter.js (in the JavaScript folder). */
.PrettyMenu ul.AspNet-Menu li:hover, 
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Hover
{   
}

.PrettyMenu ul.AspNet-Menu li:hover a, 
.PrettyMenu ul.AspNet-Menu li:hover span, 
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Hover a,
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Hover span,
.PrettyMenu ul.AspNet-Menu li:hover li:hover a, 
.PrettyMenu ul.AspNet-Menu li:hover li:hover span, 
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Hover li.AspNet-Menu-Hover a,
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Hover li.AspNet-Menu-Hover span,
.PrettyMenu ul.AspNet-Menu li:hover li:hover ul a:hover, 
.PrettyMenu ul.AspNet-Menu li:hover li:hover ul span.Asp-Menu-Hover, 
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Hover li.AspNet-Menu-Hover ul a:hover,
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Hover li.AspNet-Menu-Hover ul span.Asp-Menu-Hover
{
    color: #ffffff;
}

.PrettyMenu ul.AspNet-Menu li:hover ul a, 
.PrettyMenu ul.AspNet-Menu li:hover ul span, 
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Hover ul a,
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Hover ul span,
.PrettyMenu ul.AspNet-Menu li:hover li:hover ul a, 
.PrettyMenu ul.AspNet-Menu li:hover li:hover ul span, 
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Hover li.AspNet-Menu-Hover ul a,
.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Hover li.AspNet-Menu-Hover ul span
{
    margin: 0;
	padding: 6px 0;
	line-height: normal;
	border-top: 1px solid #DDDDDD;
	position: relative;
	text-indent: 15px;
	color:#333333;
	background: #FFF;
}

/* While you hover over a list item (li) you are also hovering over a link or span because */
/* the link or span covers the interior of the li.  So you can set some hover-related styles */
/* in the rule (above) for the li but set other hover-related styles in this (below) rule. */
.PrettyMenu ul.AspNet-Menu li a:hover,
.PrettyMenu ul.AspNet-Menu li span.Asp-Menu-Hover
{
	background:#0099FF;
	text-decoration: none;    
}

.PrettyMenu ul.AspNet-Menu li.AspNet-Menu-Leaf a:hover
{
	text-decoration: none;    
}


/* -------------------------------------------------------------------------- */
/* When the Menu control's Orientation property is Horizontal the adapter wraps the menu with DIV */
/* whose class is AspNet-Menu-Horizontal. */
/* Note that the example menu in this web site uses absolute positioning to force the menu to occupy */
/* a specific place in the web page.  Your web site will likely use a different technique to position your */
/* menu.  So feel free to change all the properties found in this CSS rule if you clone this style sheet. */
/* There is nothing, per se, that is magical about these particular property value choices.  They happen to */
/* work well for the sample page used to demonstrate an adapted menu. */

.PrettyMenu .AspNet-Menu-Horizontal
{   	
	position:absolute;
    left:0px;
    top: 0;
    z-index: 400;
    bottom: 0px;
}

/* This rule controls the width of the top tier of the horizontal menu. */
/* BE SURE TO MAKE THIS WIDE ENOUGH to accommodate all of the top tier menu items that are lined */
/* up from left to right. In other words, this width needs to be the width of the individual */
/* top tier menu items multiplied by the number of items. */
.PrettyMenu .AspNet-Menu-Horizontal ul.AspNet-Menu
{
    
}

/* This rule effectively says: style all tiers EXCEPT THE TOP TIER in the menu this way... */
/* In other words, this rule can be used to style the second and third tiers of the menu without impacting */
/* the topmost tier's appearance. */
/* Remember that only the topmost tier of the menu is horizontal.  The second and third tiers are vertical. */
/* So, they need a much smaller width than the top tier.  Effectively, the width specified here is simply */
/* the width of a single menu item in the second and their tiers. */
.PrettyMenu .AspNet-Menu-Horizontal ul.AspNet-Menu ul
{
    left: 0;
    top: 100%;
    border-bottom:1px solid #DDDDDD;
    border-left:1px solid #DDDDDD;
    background:white;
}

.PrettyMenu .AspNet-Menu-Horizontal ul.AspNet-Menu ul ul
{
    top: -0.3em;
}

.PrettyMenu .AspNet-Menu-Horizontal ul.AspNet-Menu ul ul
{
    
}

/* Generally, you use this rule to set style properties that pertain to all menu items. */
/* One exception is the width set here.  We will override this width with a more specific rule (below) */
/* That sets the width for all menu items from the second tier downward in the menu. */
.PrettyMenu .AspNet-Menu-Horizontal ul.AspNet-Menu li
{
    text-align:center;
}
.PrettyMenu .AspNet-Menu-Horizontal li.AspNet-Menu-Hover
{
	color: #4f4f4f;	
	background: none;
	text-decoration:none;    
}

/* This rule establishes the width of menu items below the top tier.  This allows the top tier menu items */
/* to be narrower, for example, than the sub-menu items. */
/* This value you set here should be slightly larger than the left margin value in the next rule. See */
/* its comment for more details. */
.PrettyMenu .AspNet-Menu-Horizontal ul.AspNet-Menu ul li
{
    text-align:left;
    width:190px;
    z-index:200;
}

.PrettyMenu .AspNet-Menu-Horizontal ul.AspNet-Menu ul ul li
{
    
}

/* Third tier menus have to be positioned differently than second (or top) tier menu items because */
/* they drop to the side, not below, their parent menu item. This is done by setting the last margin */
/* value (which is equal to margin-left) to a value that is slightly smaller than the WIDTH of the */
/* menu item. So, if you modify the rule above, then you should modify this (below) rule, too. */
.PrettyMenu .AspNet-Menu-Horizontal ul.AspNet-Menu li ul li ul
{
    /*margin: -1.4em 0 0 10.35em;*/
}

.LeftMenu .AspNet-Menu-Vertical
{
    position:relative;
    top: 0;
    left: 0;
    z-index: 300;
}

/* The menu adapter renders an unordered list (ul) in HTML for each tier in the menu. */
/* So, effectively says: style all tiers in the menu this way... */
.LeftMenu ul
{
    /*background:#BBEB86;*/
}

/* Top tier */
.LeftMenu .AspNet-Menu-Vertical ul.AspNet-Menu
{
	/*width: 9em;*/
}

/* This rule effectively says: style all tiers EXCEPT THE TOP TIER in the menu this way... */
/* In other words, this rule can be used to style the second and third tiers of the menu without impacting */
/* the topmost tier's appearance. */
.LeftMenu ul.AspNet-Menu ul
{
    left: 17.2em;
    top: -1em;
    z-index: 999;
}

.LeftMenu ul.AspNet-Menu ul ul
{
    left: 10.4em;
}

/* The menu adapter generates a list item (li) in HTML for each menu item. */
/* Use this rule create the common appearance of each menu item. */
.LeftMenu ul.AspNet-Menu li
{
   /* background:#BBEB86 url(bg-menu-example.png) repeat-x;*/
}

/* Within each menu item is a link or a span, depending on whether or not the MenuItem has defined it's */
/* NavigateUrl property. By setting a transparent background image here you can effectively layer two images */
/* in each menu item.  One comes from the CSS rule (above) governing the li tag that each menu item has. */
/* The second image comes from this rule (below). */
.LeftMenu ul.AspNet-Menu li a,
.LeftMenu ul.AspNet-Menu li span
{
    font-weight:bold;
    color: #000000;
    /*padding: 14px 2px 5px 25px;*/
    border-top: solid 0px #E7E7E7;
    border-right: solid 0px #D2D2D2;
    border-bottom: solid 1px #c9d1d6;
    border-left: solid 0px #E7E7E7;
    /*background: transparent url(arrow.png) right center no-repeat;*/
    
}

/* When a menu item contains no submenu items it is marked as a "leaf" and can be styled specially by this rule. */
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Leaf a,
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Leaf span
{
    background-image: none; 
}

/* Not used presently.  This is here if you modify the menu adapter so it renders img tags, too. */
.LeftMenu ul.AspNet-Menu li a img
{
    border-style: none;
    vertical-align: middle;
}

/* When you hover over a menu item, this rule comes into play. */
/* Browsers that do not support the CSS hover pseudo-class, use JavaScript to dynamically change the */
/* menu item's li tag so it has the AspNet-Menu-Hover class when the cursor is over that li tag. */
/* See MenuAdapter.js (in the JavaScript folder). */
.LeftMenu ul.AspNet-Menu li:hover, 
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Hover
{
 	color: #4f4f4f;
	background: #eee;      
}

.LeftMenu ul.AspNet-Menu li:hover a, 
.LeftMenu ul.AspNet-Menu li:hover span, 
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Hover a,
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Hover span,
.LeftMenu ul.AspNet-Menu li:hover li:hover a, 
.LeftMenu ul.AspNet-Menu li:hover li:hover span, 
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Hover li.AspNet-Menu-Hover a,
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Hover li.AspNet-Menu-Hover span,
.LeftMenu ul.AspNet-Menu li:hover li:hover ul a:hover, 
.LeftMenu ul.AspNet-Menu li:hover li:hover ul span.Asp-Menu-Hover, 
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Hover li.AspNet-Menu-Hover ul a:hover,
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Hover li.AspNet-Menu-Hover ul span.Asp-Menu-Hover
{
    color: #ffffff;
    
}

.LeftMenu ul.AspNet-Menu li:hover ul a, 
.LeftMenu ul.AspNet-Menu li:hover ul span, 
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Hover ul a,
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Hover ul span,
.LeftMenu ul.AspNet-Menu li:hover li:hover ul a, 
.LeftMenu ul.AspNet-Menu li:hover li:hover ul span, 
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Hover li.AspNet-Menu-Hover ul a,
.LeftMenu ul.AspNet-Menu li.AspNet-Menu-Hover li.AspNet-Menu-Hover ul span
{
    color: #b0cdfd;
    
}

/* While you hover over a list item (li) you are also hovering over a link or span because */
/* the link or span covers the interior of the li.  So you can set some hover-related styles */
/* in the rule (above) for the li but set other hover-related styles in this (below) rule. */
.LeftMenu ul.AspNet-Menu li a:hover,
.LeftMenu ul.AspNet-Menu li span.Asp-Menu-Hover
{
 
}
.PrettyMenu .AspNet-Menu-Horizontal ul.AspNet-Menu ul li a
{
    font-weight:normal;
    color:#006699;
}
.PrettyMenu .AspNet-Menu-Horizontal ul.AspNet-Menu ul li a:hover
{
    color:#CC0000;
    background-color:#FFFFCC;
}